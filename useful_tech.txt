--program to implement infinite scrolling of background
pic_iter_1 = love.graphics.newImage("image.imageformat")
pic_iter_2 = love.graphics.newImage("image.imageformat")

pic_x1 = 1366
pic_x2 = 0
pic_y = 0

function love.draw()
	love.graphics.draw(pic_iter_1, -pic_x1, pic_y)
	love.graphics.draw(pic_iter_2, pic_x2, pic_y)
end

function love.update(dt)
	pic_x1 = pic_x1 + dt*90
	if pic_x1 >= 1366 then
		pic_x1 = -1366
	end
	pic_x2 = pic_x2 - dt*90
	if pic_x2 <= -1366 then
		pic_x2 = 1366
	end
end
to simulate gravity in an asset, we use:
speed_variable = speed_variable + gravity_constant*dt (update variable)
dist_variable = dist_variable + speed_variable
 
we can assign our own built-methods in love2D. For example:
love.keyboard.keysPressed = {}
we can use it in the way as follows; suppose,

function love.keypressed(key)
	love.keyboard.keysPressed[key] = true

end
anytime the user presses any key because love.keypressed gets called for you, the table gets
populated. This feature is provided by lua.
now, love's keyboard functions have certain limitations, the main one of which is lack of
customization.
we know the function 'love.keyboard.isDown()', which checks for a continuous key input.
but what if we need to check if the key was pressed once?
for that, we have the function love.keypressed(key); but in the process to customize this,
we ultimately have to override this function, which opens up a whole other can of worms.
then what do we do?

we can CREATE a function that enables us to give the ability to test whether a key was 
pressed in the last frame, by the following:

function love.keyboard.wasPressed(key)
	--checks the table we created
	return love.keyboard.isPressed
end

--make sure to also put the table in the update, because the table value would otherwise
--always show true when and if a key is pressed
but why are we doing this?
so that we can query input from files other than main.lua
basically,

if love.keyboard.wasPressed('space') then
	--jump math
end
